@page "/UserManagement"
@using System.Net.Http.Json
@using Model
@inject HttpClient httpClient
@inject IAdministrationService adminService  

<MudDataGrid T="User" MultiSelection="true" Items="@Users" SortMode="SortMode.Multiple" Filterable="true" QuickFilter="@_quickFilter"
             Hideable="true" RowClick="@RowClicked" SelectedItemsChanged="@SelectedItemsChanged">
    <ToolBarContent>
        <MudText Typo="Typo.h6">Gestion des utilisateurs</MudText>
        <MudSpacer />
        <MudTextField @bind-Value="_searchString" Placeholder="Search" Adornment="Adornment.Start" Immediate="true"
                      AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
    </ToolBarContent>
    <Columns>
        <SelectColumn T="User" />
        <PropertyColumn Property="x=>x.rowNumber" Title="Nr" Sortable="false" Filterable="false" />
        <PropertyColumn Property="x => x.firstName" Title="nom" />
        <PropertyColumn Property="x => x.lastName" SortBy="@_sortBy" Title="prénom"/>
        <PropertyColumn Property="x => x.adresse" Title="adresse" />
        <PropertyColumn Property="x => x.email" Title="Email" />
        <PropertyColumn Property="x =>string.Join(',',x.role)" Title="Role Utilisateur" />
    </Columns>
    <PagerContent>
        <MudDataGridPager T="User" />
    </PagerContent>
</MudDataGrid>

<div class="d-flex flex-wrap mt-4">
    <MudSwitch @bind-Checked="@_sortNameByLength" Color="Color.Primary">Sort Name Column By Length</MudSwitch>
</div>

<MudExpansionPanels Style="flex:1">
    <MudExpansionPanel Text="Show Events">
        @foreach (var message in _events)
        {
            <MudText Typo="@Typo.body2">@message</MudText>
        }
        @if (_events.Count > 0)
        {
            <div class="d-flex">
                <MudSpacer />
                <MudButton Class="mt-3" ButtonType="ButtonType.Button" Variant="Variant.Filled" OnClick="@(() => _events.Clear())">Clear</MudButton>
            </div>
        }
    </MudExpansionPanel>
</MudExpansionPanels>

@code {
    private IEnumerable<User> Users= new List<User>();
    private int RowNumber = 0;
    private string _searchString;
    private bool _sortNameByLength;
    private List<string> _events = new();
    // custom sort by name length
    private Func<User, object> _sortBy => x =>
    {
        if (_sortNameByLength)
            return x.lastName.Length;
        else
            return x.lastName;
    };
    // quick filter - filter gobally across multiple columns with the same input
    private Func<User, bool> _quickFilter => x =>
    {
        if (string.IsNullOrWhiteSpace(_searchString))
            return true;

        if (x.lastName.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
            return true;

        if (x.firstName.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
            return true;

        if ($"{x.rowNumber} {x.adresse} {x.email}".Contains(_searchString))
            return true;

        return false;
    };

    protected override async Task OnInitializedAsync()
    {
        
        Users = await adminService.GetUsers();
    }

    // events
    void RowClicked(DataGridRowClickEventArgs<User> args)
    {
        _events.Insert(0, $"Event = RowClick, Index = {args.RowIndex}, Data = {System.Text.Json.JsonSerializer.Serialize(args.Item)}");
    }

    void SelectedItemsChanged(HashSet<User> items)
    {
        _events.Insert(0, $"Event = SelectedItemsChanged, data = {System.Text.Json.JsonSerializer.Serialize(items)}");
    }
}